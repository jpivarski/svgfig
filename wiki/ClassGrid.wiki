#summary Draw a grid over a specified region
#labels Reference

= class Grid =

Grid draws a grid over a specified region using the same algorithms as
[ClassTicks Ticks] and [ClassAxes Axes].  The grid will be curved in
non-linear transformations, and can be a good way to "feel" the shape
of the transformation.

== Arguments ==

*Grid(xmin, xmax, ymin, ymax, ticks, miniticks, logbase, mini_attr, attr)*

|| xmin, xmax || _*required*_ || the x range ||
|| ymin, ymax || _*required*_ || the y range ||
|| ticks || _default_=-10 || if positive, make N ticks, if negative, "at least -N", if a list or dict, put grid lines at explicit positions ||
|| miniticks || _default_=False || if True, ||

|| attribute=value pairs || _keyword list_ || SVG attributes ||



  def __init__(self, xmin, xmax, ymin, ymax, ticks=-10, miniticks=False, logbase=None, mini_attr={}, **attr):



Line draws a line between two points, but this line is mutable by
coordinate transformations.  If the coordinates curve, the line will
curve.

== Arguments ==

*Line(x1, y1, x2, y2, attribute=value)*

|| x1, y1 || _*required*_ || the starting point ||
|| x2, y2 || _*required*_ || the ending point ||
|| attribute=value pairs || _keyword list_ || SVG attributes ||

== SVG method ==

Curve has a *SVG* member, as described in [GeneralPrimative General features for all primatives].

== Path method ==

Curve has a *Path* member, as described in [GeneralPrimative General features for all primatives].



#summary ClassGrid
#labels Reference

= ClassGrid =

== Arguments ==

== Return value ==

== Examples ==

