#summary How to make simple plots with SVGFig
#labels Featured,Tutorial

= Plotting Tutorial =

SVGFig allows you to do sophisticated mathematical drawing and offers a lot of control over the output, but sometimes you just want to make a simple plot.  Here are some examples and tips.

Let's plot x^2^, the "Hello world" of graphing calculators.
{{{
>>> from svgfig import *
>>> Plot(-2, 2, -2, 6, Curve(funcRtoR("x**2"), -2, 2)).SVG().save()
}}}

The above should save a file called "tmp.svg" in the current working directory (UNIX/Linux/Mac) or on the Desktop (Windows).  Open this file in a web browser or SVG viewer/editor.  It should look like the following.

[http://svgfig.googlecode.com/svn/wiki/PlottingTutorial-1.png]

If you're using [http://www.inkscape.org Inkscape] or Inkview and the labels on the x axis are in the wrong place, it's because Inkscape doesn't correctly handle SVG's `baseline` properties.  I've requested a correction, but in the mean-time, you can get the text to look right by setting the following,
{{{
>>> hacks["inkscape-text-vertical-shift"] = True
}}}
and drawing it again.

Now that you can see the plot, let's split apart the line that made it.
{{{
>>> Plot(-2, 2, -2, 6, Curve(funcRtoR("x**2"), -2, 2)).SVG().save()
}}}
  * [ClassPlot Plot] is a transformable container of primatives, like the "[ClassFig Fig]" in "SVGFig".  The first four arguments set the range: _xmin_, _xmax_, _ymin_, _ymax_.  The rest is a list of primatives that you'd like to draw, in this case, one [ClassCurve Curve].
  * [ClassCurve Curve] draws a parametric function.  We want to draw a function of one variable, so we construct a parametric function in which the x component is simply linear: x(t), y(t) = t, t^2^.  [ClassCurve Curve] needs endpoints, so we pass -2 and 2.
  * [DefFuncRtoR funcRtoR] converts a string in "f(x)" form to a parametric function like t, t^2^.
  * The [ClassPlot Plot] constructor creates a [ClassPlot Plot] and fills it with one primative.  We then call [ClassPlot Plot]'s *SVG* member, which applies all transformations and creates a Scalable Vector Graphics drawing as a [ClassSVG SVG] object.  We don't keep a reference to the new [ClassPlot Plot], so it disappears.
  * The [ClassSVG SVG] stays around long enough for us to call its *save* method, which saves it to a file.  You can pass a name explicitly, e.g. `save("filename.svg")` or `save("filename.svgz")` for a compressed image.

Why such long syntax?  It makes all steps in the process manifest, so that it's clear how to take it apart if you have to.  For instance, there are no special commands for overlaying two plots, you just add another [ClassCurve Curve] primative to the list.
{{{
>>> Plot(-2, 2, -2, 6, Curve(funcRtoR("x**2"), -2, 2), Curve(funcRtoR("x**3"), -2, 2, stroke="blue")).SVG().save()
}}}
[http://svgfig.googlecode.com/svn/wiki/PlottingTutorial-2.png]

They didn't both need to be [ClassCurve Curves].  All the graphics primatives are the same sorts of objects, so we could overlay an [ClassEllipse Ellipse] instead.  (The `stroke="blue"` attribute is the same because it's passed directly to the Scalable Vector Graphics language.  Any SVG attribute can go there.)
{{{
>>> Plot(-2, 2, -2, 6, Curve(funcRtoR("x**2"), -2, 2), Ellipse(0, 0, 1, 2, 1, stroke="blue")).SVG().save()
}}}
[http://svgfig.googlecode.com/svn/wiki/PlottingTutorial-3.png]

Now what about the way that the plot looks?  Normally coordinate axes have arrows.  We can do that in SVGFig, but we need to give the arrows a name.  (SVG refers to markers, such as arrowheads, with URLs, just like a webpage.)
{{{
>>> Plot(-2, 2, -2, 6, Curve(funcRtoR("x**2"), -2, 2), arrows="myarrows").SVG().save()
}}}
[http://svgfig.googlecode.com/svn/wiki/PlottingTutorial-4.png]

Of course, all of the previous exmaples are the sorts of plots we see in math textbooks.  Physicists usually plot data in boxes like this:
{{{
>>> Frame(-2, 2, -2, 6, Curve(funcRtoR("x**2"), -2, 2)).SVG().save()
}}}
[http://svgfig.googlecode.com/svn/wiki/PlottingTutorial-5.png]

[ClassPlot Plot] and [ClassFrame Frame] are drop-in replacements for [ClassFig Fig], which doesn't draw an axis and doesn't transform to a specified range unless explicitly told to do so.  You can use [ClassFig Fig] to have more control over the axes.  For instance, suppose we only wanted the X axis, and not the y axis:
{{{
>>> Fig(Curve(funcRtoR("x**2"), -2, 2), XAxis(-2, 2, 0), trans=window(-2, 2, -2, 6, x=10, width=80)).SVG().save()
}}}
[http://svgfig.googlecode.com/svn/wiki/PlottingTutorial-6.png]

The [DefWindow window] transformation passed as a keyword argument to [ClassFig Fig] takes the role of the "-2, 2, -2, 6" that we've been passing to [ClassPlot Plot] and [ClassFrame Frame].  This [DefWindow window] transforms _xmin_, _xmax_, _ymin_, _ymax_ = (-2, 2, -2, 6) to a box in the user coordinates whose upper-left corner is _x_, _y_ = (10, 0) with a width of 80% and a height of 100%.

Though you could construct it from the ground-up, the [ClassPlot Plot] and [ClassFrame Frame] classes provide convenient options for setting tick marks.
  * You can ask for exactly 10 y-ticks, even though it doesn't divide the range very well.
{{{
>>> Plot(-2, 2, -2, 6, Curve(funcRtoR("x**2"), -2, 2), yticks=10).SVG().save()
}}}
[http://svgfig.googlecode.com/svn/wiki/PlottingTutorial-7.png]
  * We can give SVGFig a little more freedom to pick nice tick values (multiples of 2 and 5) while specifying an upper limit on the number.  A negative number like -20 is interpreted as "no more than 20 ticks."
{{{
>>> Plot(-2, 2, -2, 6, Curve(funcRtoR("x**2"), -2, 2), yticks=-20).SVG().save()
}}}
[http://svgfig.googlecode.com/svn/wiki/PlottingTutorial-8.png]
  * We can also specify the exact locations of every tick by passing a Python list.
{{{
>>> Plot(-2, 2, -2, 6, Curve(funcRtoR("x**2"), -2, 2), yticks=[2,3,4,5]).SVG().save()
}}}
[http://svgfig.googlecode.com/svn/wiki/PlottingTutorial-9.png]
  * And we can additionally control the text labels of the ticks by passing a Python dictionary.
{{{
>>> Plot(-2, 2, -2, 6, Curve(funcRtoR("x**2"), -2, 2), yticks={2:"two", 3:"three", 4:"four", 5:"five"}).SVG().save()
}}}
[http://svgfig.googlecode.com/svn/wiki/PlottingTutorial-10.png]

Similarly, the shorter, unlabeled ticks can be controlled with xminiticks and yminiticks (though the dictionary method doesn't apply).  You can find more in the [TickSpecification tick specification reference].

For a complete tutorial, see the [Reference documentation].