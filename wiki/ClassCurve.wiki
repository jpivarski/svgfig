#summary Draw functions and parametric curves
#labels Reference

= class Curve =

Curve draws a Python callable as a path.  Curves are adaptively
sampled, meaning that the function is evaluated at more points near
corners and along curves and at fewer points along straight segments.
If the function is discontinuous (like a step function), the path will
be a broken line.

== Arguments ==

*Curve(f, low, high, loop, attribute=value)*

|| f || _*required*_ || a Python callable or string in the form "f(t), g(t)" ||
|| low, high || _*required*_ || left and right endpoints" ||
|| loop || _default_=False || if True, connect the endpoints ||
|| attribute=value pairs || _keyword list_ || SVG attributes ||

The function must take one argument and return two values.  If it is a
string, it will be passed to [DefFuncRtoR2 funcRtoR2].  For complex
functions, use an explicit call to [DefFuncRtoC funcRtoC] and for real
functions, use an explicit call to [DefFuncRtoR funcRtoR], which
return a function in the right format.

The following are all equivalent:
  * `Curve(lambda t: t, t**2, 0, 1)`
  * `Curve("t, t**2")`
  * `Curve(funcRtoR2("t, t**2"), 0, 1)`
  * `Curve(funcRtoC("t + (1j)*t**2"), 0, 1)`
  * `Curve(funcRtoR("x**2"), 0, 1)`

== SVG method ==

Curve has a *SVG* member, as described in [GeneralPrimative General features for all primatives].

== Path method ==

Curve has a *Path* member, as described in [GeneralPrimative General features for all primatives].

== Special data members ==

After the Curve has been evaluated with *SVG* or *Path*, it gains a
new data memeber, `last_samples`.  This is an iterable of
Curve.Sample objects:
{{{
>>> c = Curve(funcRtoR("x**2"), 0, 1)
>>> c.SVG()
>>> for s in c.last_samples:
...     print s.x, s.y, s.X, s.Y
...
}}}

Curve.Sample has four data members, `x`, `y`, `X`, `Y`.  These are
coordinates in local (lowercase) and global (uppercase) coordinates.
If a coordinate is `None`, there is a break in the curve, due to a
discontinuity in the supplied function.

This iterable is actually a doubly-linked list, not a Python
construct, connected through data members called `left` and `right`.
